// import { resolve } from "path";
const { parsed } = require("dotenv-safe").config();
// const webpack = require('webpack');

export default {
  webpack(config, env, helpers) {
    const { rule: babelLoader } = helpers.getLoadersByName(
      config,
      "babel-loader"
    )[0];
    const babelConfig = babelLoader.options;

    // emotion
    babelConfig.plugins.push(["emotion"]);

    // Switch css-loader for typings-for-css-modules-loader, which is a wrapper
    // that automatically generates .d.ts files for loaded CSS
    // helpers.getLoadersByName(config, "css-loader").forEach(({ loader }) => {
    //   loader.loader = "typings-for-css-modules-loader";
    //   loader.options = Object.assign(loader.options, {
    //     camelCase: true,
    //     banner:
    //       "// This file is automatically generated from your CSS. Any edits will be overwritten.",
    //     namedExport: true,
    //     silent: true,
    //   });
    // });

    // dotenv injection
    const { plugin } = helpers.getPluginsByName(config, "DefinePlugin")[0];
    Object.assign(
      plugin.definitions,
      Object.keys(parsed).reduce(
        (env, key) => ({
          ...env,
          [`process.env.${key}`]: JSON.stringify(parsed[key]),
        }),
        {}
      )
    );

    // const CssBlocksPlugin = require('./css-blocks');
    //
    // config.module.rules.unshift({
    //   enforce: 'pre',
    //   test: /\.block\.css$/,
    //   loader: CssBlocksPlugin.cssLoader,
    // });
    //
    // config.module.rules.push({
    //   test: /\.m?[jt]sx?$/,
    //   loader: CssBlocksPlugin.jsLoader,
    // });
    //
    // config.plugins.push(new CssBlocksPlugin());

    // graphql-tag loader
    config.module.rules.push({
      test: /\.(graphql|gql)$/,
      exclude: /node_modules/,
      loader: "graphql-tag/loader",
    });

    if (!env.isProd) {
      config.devServer.proxy = {
        "/api": {
          target: "http://localhost:4000",
          pathRewrite: {
            // '^/api/graphql' : '/graphql',
            // '^/api/upload' : '/upload',
            "^/api": "",
          },
          ws: true,
          // logLevel: 'debug',
        },
      };
    }

    if (env.ssr) {
      // config.optimization.minimize = false;
      // config.mode = 'development';
      // config.devtool = 'hidden-source-map';
      // config.output.devtoolModuleFilenameTemplate = "file://[absolute-resource-path]";
      // config.output.devtoolFallbackModuleFilenameTemplate = "file://[absolute-resource-path]?[hash]";
    }

    return config;
  },
};
